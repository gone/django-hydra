[tools]
python = "3.13"
node = "22"
uv = "0.5.9"
colima  = "latest"
lima = "latest"
pre-commit = "latest"

[env]
_.python.venv = { path = ".venv", create = true }
UV_PYTHON="python3.13"
ENV_NAME="[[project_name]]"
DJANGO_SETTINGS_MODULE = "[[project_name]].config.settings.local"
DATABASE_URL = "postgres://[[project_name]]:[[project_name]]@localhost:5432/[[project_name]]"
REDIS_URL="redis://localhost:6379"

# Development settings
DJANGO_DEBUG = "True"
DJANGO_SECRET_KEY = "your-secret-key-here"
PYTHONDONTWRITEBYTECODE = "1"  # Prevent Python from writing .pyc files
PYTHONBREAKPOINT="pdb.set_trace"
#required settings for prod to run, sometimes helpful to set locally to run local w/ prod settings
REDIS_HOST=""
REDIS_PORT=""
SENTRY_DSN=""
DJANGO_ALLOWED_HOSTS="127.0.0.1,localhost"
DJANGO_AWS_ACCESS_KEY_ID=""
DJANGO_AWS_SECRET_ACCESS_KEY=""
DJANGO_AWS_STORAGE_BUCKET_NAME=""
DJANGO_AWS_S3_ENDPOINT_URL=""
DJANGO_SECURE_SSL_REDIRECT="false"
DJANGO_SECURE_HSTS_SECONDS=0

[tasks]
export = "./scripts/export_project.py . output.xml"
uv = "uv sync --extra dev --extra test"
dev = '''
trap 'kill $(jobs -p)' EXIT
npm run dev &
./manage.py runserver
'''
build = "npm run build; ./manage.py collectstatic"
test = "pytest"
lint = "pre-commit run --all-files"
clean = ["rm -rf .venv", "rm -rf node_modules"]
setup-js = "npm install; npm run build"
pre-commit =  "pre-commit run"


[tasks.migrate]
description = "run django migrations"
wait_for = ["uv"]
run = "./manage.py migrate"


[tasks."db:check"]
description = "Check if current user has PostgreSQL permissions"
file = "mise-tasks/db/check"
hide = true # Hide from task list since it's a dependency
[tasks."db:create-user"]
description = "Create PostgreSQL user for current system user"
file = "mise-tasks/db/create-user"
depends = ["db:check"]
hide = true # Hide from task list since it's a dependency

[tasks."db:create-database"]
description = "Set up project database"
file = "mise-tasks/db/setup"
depends = ["db:create-user"]

[tasks."db:init-migrate"]
description = "Set up database and run migrations"
wait_for = ["uv"]
run = "./manage.py migrate"

[tasks."db:init"]
description = "Set up database and run migrations"
depends = ["db:create-database", "db:init-migrate"]
run = "echo 'omae wa mou shindeiru'"

[tasks."init:git"]
description = "Initialize git repository if not already setup"
depends = ["uv"]
run = """
#!/usr/bin/env bash
source mise-tasks/utils/colors

if [ -d .git ]; then
    color_info "Git repository already initialized"
else
    color_info "Initializing new Git repository..."
    git init . -b master
    color_success "Git repository initialized on main branch"
    color_info "Adding initial files..."
    git add .
    git commit -m "Initial commit"
    color_success "Created initial commit"
fi
"""

[tasks."init:js"]
description = "Initialize javascript"
depends = ["setup-js"]


[tasks."init:pre-commit"]
wait_for = ["uv", "init:git", "init:js"]
run = """
pre-commit install --install-hooks
pre-commit run --all-files
"""

[tasks."init:started"]
quiet = true
run = "echo 'Setting up for a GRRRRREAT DJANGO PROJECT'"

[tasks.new-project]
description = "Set up project"
depends = ["init:started", "uv", "init:js", "db:init","init:git", "init:pre-commit"]
run = """
echo '-------------------------------------------------------------'
echo '  Maybe The Real init Was the Friends We Made Along the Way  '
echo '-------------------------------------------------------------'
"""

[settings]
status.show_env = true
